;大野のAI

+class AI()
	;turnは自分の石の色を表す。黒が1、白が-1でturnには1か―1が入っている。
	
	;Gameから得て、とっておくmap
	var GameMap: [][]int
	;相手の一手先を見るための空想マップ
	var AIMap: [][]int
	
	;初期化処理
	*func ctor()
		do me.GameMap :: #[\game@SIZE, \game@SIZE]int
		do me.AIMap :: #[\game@SIZE, \game@SIZE]int
	end func
	
	
	+func main(turn: int): []int
		;moveは次に打つ座標。初期値は(-1,-1)にしてある。
		var move: []int :: [-1, -1]
		
		
		;↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓コードを書くところ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
		
		;盤面の情報は\game@mapの二次元配列に入っている。
		;黒が1,白が-1、何もない場合は0が入っている
		;けれど値を変えてしまわないように@get_map(x,y)でmapの中身を入手できるようにした
		
		;相手が置ける場所の数
		var num: int :: 0
		;相手が置ける場所の数の最小値
		var min: int :: 100
		
		
		;探索の例を以下に示した
		
		;\game\game@SIZEが盤面の一辺のマスの数。マスはx,yそれぞれに0~\game\game@SIZE-1の数が割り当てられている。
		for x(0, \game@SIZE - 1)
			for y(0, \game@SIZE - 1)
				;\game@rule(x,y,turn)がtrueのとき、自分がturnの石を置くとき座標(x,y)に置ける。
				if(\game@rule(x, y, turn))
					;自分が石を置く座標を決める
					;mapをコピーする
					for a(0, \game@SIZE - 1)
						for b(0, \game@SIZE - 1)
							do me.AIMap[a][b] :: @get_map(a, b)
						end for
					end for
					;置いてみる
					do me.reverse(x, y, turn)
					
					do num :: 0
					
					;(x,y)に置いたときに相手が置ける場所の数を数える
					for a(0, \game@SIZE - 1)
						for b(0, \game@SIZE - 1)
							if(me.rule(a, b, turn * -1))
								do num :+ 1
								;相手が角に置ける場合はより価値を低くする
								if((x = 0 | x = \game@SIZE - 1) & (y = 0 | y = \game@SIZE - 1))
									do num :+ 20
								end if
							end if
						end for
					end for
					
					;これまでに見たnumで最小なら、そこに置く
					if(num < min)
						do min :: num
						do move :: [x, y]
					end if
					
					
				end if
			end for
		end for
		
		
		for x(0, \game@SIZE - 1)
			for y(0, \game@SIZE - 1)
				;\game@rule(x,y,turn)がtrueのとき、自分がturnの石を置くとき座標(x,y)に置ける。
				if(\game@rule(x, y, turn))
					;角におけるなら置く
					if((x = 0 | x = \game@SIZE - 1) & (y = 0 | y = \game@SIZE - 1))
						do move :: [x, y]
					end if
				end if
			end for
		end for
		
		;↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
		
		ret move
	end func
	
	+func reverse(x: int, y: int, color: int)
		;各方向のとれる石の数
		var u: int :: me.get(x, y, color, 0)
		var ru: int :: me.get(x, y, color, 1)
		var r: int :: me.get(x, y, color, 2)
		var rd: int :: me.get(x, y, color, 3)
		var d: int :: me.get(x, y, color, 4)
		var ld: int :: me.get(x, y, color, 5)
		var l: int :: me.get(x, y, color, 6)
		var lu: int :: me.get(x, y, color, 7)
		
		
		;上をひっくり返す。ついでに選択した位置に石を置く
		if(u > 0)
			for i(0, u)
				do me.AIMap[x][y - i] :: color
			end for
		end if
		;右上をひっくり返す。ついでに選択した位置に石を置く
		if(ru > 0)
			for i(0, ru)
				do me.AIMap[x + i][y - i] :: color
			end for
		end if
		;右をひっくり返す。ついでに選択した位置に石を置く
		if(r > 0)
			for i(0, r)
				do me.AIMap[x + i][y] :: color
			end for
		end if
		;右下をひっくり返す。ついでに選択した位置に石を置く
		if(rd > 0)
			for i(0, rd)
				do me.AIMap[x + i][y + i] :: color
			end for
		end if
		;下をひっくり返す。ついでに選択した位置に石を置く
		if(d > 0)
			for i(0, d)
				do me.AIMap[x][y + i] :: color
			end for
		end if
		;左下をひっくり返す。ついでに選択した位置に石を置く
		if(ld > 0)
			for i(0, ld)
				do me.AIMap[x - i][y + i] :: color
			end for
		end if
		;左をひっくり返す。ついでに選択した位置に石を置く
		if(l > 0)
			for i(0, l)
				do me.AIMap[x - i][y] :: color
			end for
		end if
		;左上をひっくり返す。ついでに選択した位置に石を置く
		if(lu > 0)
			for i(0, lu)
				do me.AIMap[x - i][y - i] :: color
			end for
		end if
		
	end func
	
	+func rule(x: int, y: int, color: int): bool
		;範囲内かどうか
		if(!(x >= 0 & y >= 0 & x < \game@SIZE & y < \game@SIZE))
			ret false
		end if
		;何もないか確認
		if(me.AIMap[x][y] <> 0)
			ret false
		end if
		;各方向のとれる石の数
		var u: int :: me.get(x, y, color, 0)
		var ru: int :: me.get(x, y, color, 1)
		var r: int :: me.get(x, y, color, 2)
		var rd: int :: me.get(x, y, color, 3)
		var d: int :: me.get(x, y, color, 4)
		var ld: int :: me.get(x, y, color, 5)
		var l: int :: me.get(x, y, color, 6)
		var lu: int :: me.get(x, y, color, 7)
		;do dbg@print("r:\{r},l:\{l},u:\{u},d:\{d},ru:\{ru},lu\{lu},rd:\{rd},ld:\{ld},\n")
		;判定
		if((r > 0 | l > 0 | u > 0 | d > 0 | ru > 0 | lu > 0 | rd > 0 | ld > 0))
			ret true
		end if
		
		ret false
	end func
	
	;各方向でとれる相手の石の数を返す
	+func get(x: int, y: int, color: int, way: int): int
		;時計回り。上から
		switch(way)
		case 0
			;上を探索
			if(y = 0)
				;上にマスがない場合
				ret 0
			end if
			var count_u: int
			for i(y - 1, 0, -1)
				if(me.AIMap[x][i] = color * -1)
					;相手の石があったとき
					do count_u :+ 1
					;相手の石がない場合
				else
					;間に相手の石がある
					if(count_u > 0 & me.AIMap[x][i] = color)
						;自分の石があった場合
						ret count_u
					end if
					ret 0
				end if
			end for
		case 1
			;右上を探索
			var max_ru: int :: \game@SIZE - 1 - x < y ?(\game@SIZE - 1 - x, y)
			var count_ru: int
			for i(1, max_ru)
				if(me.AIMap[x + i][y - i] = color * -1)
					do count_ru :+ 1
				else
					if(count_ru > 0 & me.AIMap[x + i][y - i] = color)
						ret count_ru
					end if
					ret 0
				end if
			end for
		case 2
			;右を探索
			if(x = \game@SIZE - 1)
				ret 0
			end if
			var count_r: int
			for i(x + 1, \game@SIZE - 1)
				if(me.AIMap[i][y] = color * -1)
					do count_r :+ 1
				else
					if(count_r > 0 & me.AIMap[i][y] = color)
						ret count_r
					end if
					ret 0
				end if
			end for
		case 3
			;右下を探索
			var max_rd: int :: \game@SIZE - 1 - x < \game@SIZE - 1 - y ?(\game@SIZE - 1 - x, \game@SIZE - 1 - y)
			var count_rd: int
			for i(1, max_rd)
				if(me.AIMap[x + i][y + i] = color * -1)
					do count_rd :+ 1
				else
					if(count_rd > 0 & me.AIMap[x + i][y + i] = color)
						ret count_rd
					end if
					ret 0
				end if
			end for
		case 4
			;下を探索
			if(y = \game@SIZE - 1)
				ret 0
			end if
			var count_d: int
			for i(y + 1, \game@SIZE - 1)
				if(me.AIMap[x][i] = color * -1)
					do count_d :+ 1
				else
					if(count_d > 0 & me.AIMap[x][i] = color)
						ret count_d
					end if
					ret 0
				end if
			end for
		case 5
			;左下を探索
			var max_ld: int :: x < \game@SIZE - 1 - y ?(x, \game@SIZE - 1 - y)
			var count_ld: int
			for i(1, max_ld)
				if(me.AIMap[x - i][y + i] = color * -1)
					do count_ld :+ 1
				else
					if(count_ld > 0 & me.AIMap[x - i][y + i] = color)
						ret count_ld
					end if
					ret 0
				end if
			end for
		case 6
			;左を探索
			if(x = 0)
				ret 0
			end if
			var count_l: int
			for i(x - 1, 0, -1)
				if(me.AIMap[i][y] = color * -1)
					do count_l :+ 1
				else
					if(count_l > 0 & me.AIMap[i][y] = color)
						ret count_l
					end if
					ret 0
				end if
			end for
		case 7
			;左上を探索
			var max_lu: int :: x < y ?(x, y)
			var count_lu: int
			for i(1, max_lu)
				if(me.AIMap[x - i][y - i] = color * -1)
					do count_lu :+ 1
				else
					if(count_lu > 0 & me.AIMap[x - i][y - i] = color)
						ret count_lu
					end if
					ret 0
				end if
			end for
		end switch
	end func
	
end class

func get_map(x: int, y: int): int
	ret \game@map[x][y]
end func

;以下Gameよりコピペしたものを多少編集した
