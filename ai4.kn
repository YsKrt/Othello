;NN、モンテカルロ
;ReLU

;Fixed Target Q-Net
;	Qmaxを重みを更新する前のNNで得る
;Experience Replay
;	NNへランダムに入力する
;報酬のクリッピング
;	±の報酬の絶対値を一定の値にする
;Huber関数
;	MSEの絶対値が1以下であればそのまま、1より大きければ絶対誤差を用いる
+class AI()
	var filename: []char
	var nn: @NN
	
	
	;自分が置く前の盤面とこれから置く座標の記録
	var log: list<[]float>
	;相手が置く前の盤面（自分が置いた後の盤面）とそのあと相手が置いた座標の記録
	var _log: list<[]float>
	
	;Experience Replay(ランダムの情報で重み更新)
	var rndLog: list<[]float>
	var rndQ: list<float>
	;ReLU
	const way: int :: 1
	*func ctor()
		do me.rndQ :: #list<float>
		do me.rndLog :: #list<[]float>
		do me.log :: #list<[]float>
		do me._log :: #list<[]float>
		do me.nn :: #@NN
	end func
	+func main(turn: int): []int
		
		var move: []int :: [-1, -1]
		var input: []float :: #[(\game@SIZE + \game@SIZE ^ 2) * 3]float
		var Qlist: [][]float :: #[\game@SIZE, \game@SIZE]float
		var statemax: int :: \game@SIZE ^ 2
		
		for x(0, \game@SIZE - 1)
			for y(0, \game@SIZE - 1)
				;状態の入力
				do input[x + y * \game@SIZE] :: \game@map[x][y] = turn ?(1.0, 0.0)
				do input[statemax + x + y * \game@SIZE] :: \game@map[x][y] = turn * -1 ?(1.0, 0.0)
			end for
		end for
		for x(0, \game@SIZE - 1)
			for y(0, \game@SIZE - 1)
				if(\game@rule(x, y, turn))
					;行動の入力
					do input[statemax * 2 + x + y * \game@SIZE] :: 1.0
					;Q値を入手
					var Q: []float :: me.nn.main(input, [0.0], way, 0)
					do Qlist[x][y] :: Q[0]
					;元に戻す
					do input[statemax * 2 + x + y * \game@SIZE] :: 0.0
				end if
			end for
		end for
		var rndMove: []int :: [-1, -1]
		var rndCount: int
		var Qmax: float :: -inf
		for x(0, \game@SIZE - 1)
			for y(0, \game@SIZE - 1)
				if(\game@rule(x, y, turn))
					;Q値最大の行動をとる
					if(Qlist[x][y] > Qmax)
						do Qmax :: Qlist[x][y]
						do move :: [x, y]
					end if
					;ランダム用の座標を得る
					if(lib@rnd(0, rndCount) = 0)
						do rndMove :: [x, y]
					end if
					do rndCount :+ 1
				end if
			end for
		end for
		
		;do dbg@print("Q:\{Qmax}\n")
		
		;ランダムで行動する
		if(\game@count % 3 = 0 & \game@count > 0 & \game@count < 1000)
			;do move :: rndMove
		end if
		
		
		;状態行動の記録
		;自分の
		do input[statemax * 2 + move[0] + move[1] * \game@SIZE] :: 1.0
		do me.log.add(input)
		;相手の
		do me._log.add(\game@preState)
		
		ret move
	end func
	
	+func start(filename: []char)
		do me.nn.read(filename, \game@Readcount)
		do me.filename :: filename
	end func
	
	+func init(turn: int, endF: int)
		
		;180度回転用
		;盤面のマスの個数（マスに振り当てられた数ではない）
		var statemax: int :: \game@SIZE ^ 2
		var rInput: []float :: #[statemax * 3]float
		
		;重みの更新を以下で行う
		var dEsum: float
		var r: float :: me.get_reward(turn, endF)
		var Qtotal: float :: r
		var _Qtotal: float :: -r
		
		;自分の履歴
		do me.log.tail()
		while(!me.log.term())
			var input: []float :: me.log.get()
			
			do Qtotal :* 0.9
			var Q: []float :: me.nn.main(input, [0.0], way, 0)
			do Q[0] :+ 0.5 * (Qtotal - Q[0])
			var out: []float :: me.nn.main(input, [0.0], way, 0)
			do dEsum :+ me.nn.MSE(Q, out)
			;重みの更新
			;do me.nn.main(input, Q, way, 1)
			;
			do me.rndLog.add(input)
			do me.rndQ.add(Q[0])
			;
			for i(0, statemax - 1)
				;180度回転ver
				do rInput[i] :: input[statemax - 1 - i]
				do rInput[statemax + i] :: input[statemax * 2 - 1 - i]
				do rInput[statemax * 2 + i] :: input[statemax * 3 - 1 - i]
			end for
			;重みの更新
			;do me.nn.main(rInput, Q, way,1)
			;
			do me.rndLog.add(input)
			do me.rndQ.add(Q[0])
			;
			do me.log.prev()
		end while
		
		;相手の行動と状態で重み更新
		do me._log.tail()
		while(!me._log.term())
			var _input: []float :: me._log.get()
			do _Qtotal :* 0.9
			var Q: []float :: me.nn.main(_input, [0.0], way, 0)
			do Q[0] :+ 0.5 * (_Qtotal - Q[0])
			var out: []float :: me.nn.main(_input, [0.0], way, 0)
			do dEsum :+ me.nn.MSE(Q, out)
			;重みの更新
			;do me.nn.main(_input, Q, way, 1)
			;
			do me.rndLog.add(_input)
			do me.rndQ.add(Q[0])
			;
			for i(0, statemax - 1)
				;180度回転ver
				do rInput[i] :: _input[statemax - 1 - i]
				do rInput[statemax + i] :: _input[statemax * 2 - 1 - i]
				do rInput[statemax * 2 + i] :: _input[statemax * 3 - 1 - i]
			end for
			;重み更新
			;do me.nn.main(rInput, Q, way, 1)
			;
			do me.rndLog.add(_input)
			do me.rndQ.add(Q[0])
			;
			do me._log.prev()
		end while
		
		;;;;;;記録したデータをランダムでNNに入れて学習させる
		
		if(\game@count % 1 = 0 & \game@count > 0)
			
			do me.rndLog.head()
			do me.rndQ.head()
			while(^me.rndLog > 0)
				
				;Experience Replay
				var count: int
				var rnd: int
				if(^me.rndLog > 1)
					do rnd :: lib@rnd(-count, ^me.rndLog - 2 - count)
					do count :+ rnd
					do me.rndLog.moveOffset(rnd)
					do me.rndQ.moveOffset(rnd)
				else
					do me.rndLog.head()
					do me.rndQ.head()
				end if
				
				var log: []float :: me.rndLog.get()
				var Q: float :: me.rndQ.get()
				
				
				;重み更新
				do me.nn.main(log, [Q], way, 1)
				
				do me.rndLog.del()
				do me.rndQ.del()
			end while
			
			
		end if
		;;;;;;
		
		;重みの保存
		do me.nn.save(\game@Traincount, \game@count, me.filename, \game@Readcount)
		;教師データとの誤差を記録
		do \main@logtxt :~ "MSE:\{dEsum}\n"
		;状態行動の記録の削除
		;自分の
		do me.log.head()
		while(!me.log.term())
			do me.log.del()
		end while
		;相手の
		do me._log.head()
		while(!me._log.term())
			do me._log.del()
		end while
		
	end func
	
	+func get_reward(turn: int, endF: int): float
		if(endF = turn)
			;do dbg@print("勝ち\n")
			ret 100.0
		else
			;do dbg@print("負け\n")
			ret - 100.0
		end if
	end func
	
end class


+class NN()
	const input_size: int :: \game@SIZE * \game@SIZE * 3
	const hidden_size: int :: 150
	const output_size: int :: 1
	const eta: float :: 5.0e-4
	const rndrange: float :: 1.0
	const clip: float :: 1.0
	;nn()のflag
	;0 sigmoid
	;1 ReLU
	;2 tanh
	;3 step
	
	
	var input: []float
	var hidden: []float
	+var output: []float
	+var weight_ih: [][]float
	+var weight_ho: [][]float
	
	var teacher: []float
	
	*func ctor()
		
		
		;入力層と隠れ層の[0]には1
		;重みの[0]にはバイアスを用意する
		do me.input :: #[input_size + 1]float
		do me.hidden :: #[hidden_size + 1]float
		do me.output :: #[output_size]float
		do me.teacher :: #[output_size]float
		do me.weight_ih :: #[input_size + 1, hidden_size + 1]float
		do me.weight_ho :: #[hidden_size + 1, output_size]float
		;1の出力
		do me.input[0] :: 1.0
		do me.hidden[0] :: 1.0
		;重みの初期化
		;全て同じ値を使うと更新してもすべて同じ値になってしまい意味がなくなる！！！
		for i(0, input_size)
			for h(0, hidden_size)
				do me.weight_ih[i][h] :: lib@rndFloat(-rndrange, rndrange)
				for o(0, output_size - 1)
					do me.weight_ho[h][o] :: lib@rndFloat(-rndrange, rndrange)
				end for
			end for
		end for
		
	end func
	
	
	+func main(input: []float, teacher: []float, flag: int, trainF: int): []float
		;入力
		for i(0, input_size - 1)
			do me.input[i + 1] :: input[i]
		end for
		;教師
		for o(0, output_size - 1)
			do me.teacher[o] :: teacher[o]
		end for
		;入力層から隠れ層へ
		for h(1, hidden_size)
			var hid: float :: 0.0
			for i(0, input_size)
				do hid :+ me.input[i] * me.weight_ih[i][h]
			end for
			switch(flag)
			case 0
				do me.hidden[h] :: me.sigmoid(hid)
			case 1
				do me.hidden[h] :: me.ReLU(hid)
			case 2
				do me.hidden[h] :: me.tanh(hid)
			case 3
				do me.hidden[h] :: me.step(hid)
			end switch
		end for
		;隠れ層から出力層へ
		for o(0, output_size - 1)
			var out: float :: 0.0
			for h(0, hidden_size)
				do out :+ me.hidden[h] * me.weight_ho[h][o]
			end for
			do me.output[o] :: out
		end for
		;重みの更新
		if(trainF = 1)
			;do dbg@print("こうしんするよ！\n")
			do me.update_w(flag)
		end if
		
		ret ##me.output
	end func
	
	+func update_w(flag: int)
		;二乗誤差の勾配(の一部)
		var dE: float
		do dE :: me.d_MSE(me.output, me.teacher)
		;do dbg@print("\{dE}\n")
		if(dE > clip)
			do dE :: clip
		elif(dE < -clip)
			do dE :: -clip
		end if
		;;;;;;↑↑クリッピング↑
		for o(0, output_size - 1)
			for h(0, hidden_size)
				;出力層と隠れ層の間の重みとバイアスの更新
				var dw_ho: float :: -eta * dE * me.hidden[h]
				{
				if(dw_ho <> 0.0)
					do dbg@print("\{dw_ho}\n")
				end if
				}
				do me.weight_ho[h][o] :+ dw_ho
				for i(0, input_size)
					;隠れ層と入力層の間の重みとバイアスの更新
					var dw_ih: float
					switch(flag)
					case 0
						;sigmoid
						do dw_ih :: -eta * dE * me.weight_ho[h][o] * (me.input[i] * me.d_sigmoid(me.hidden[h]))
					case 1
						;ReLU
						do dw_ih :: me.hidden[h] > 0.0 ?(-eta * dE * me.weight_ho[h][o] * me.input[i], 0.0)
					case 2
						;tanh
						do dw_ih :: -eta * dE * me.weight_ho[h][o] * (me.input[i] * me.d_tanh(me.hidden[h]))
					case 3
						;step
						do dw_ih :: me.hidden[h] > 0.0 ?(-eta * dE * me.weight_ho[h][o] * me.input[i], 0.0)
					end switch
					{
					if(dw_ih <> 0.0)
						do dbg@print("\{dw_ih}\n")
					end if
					}
					do me.weight_ih[i][h] :+ dw_ih
				end for
			end for
		end for
	end func
	
	+func MSE(out: []float, tea: []float): float
		var sum: float
		;do dbg@print("o:\{out[0]},t:\{tea[0]}\n")
		for o(0, output_size - 1)
			do sum :+ (out[o] - tea[o]) ^ 2.0
		end for
		ret sum / output_size $ float
	end func
	
	+func d_MSE(out: []float, tea: []float): float
		var sum: float
		for o(0, output_size - 1)
			do sum :+ (out[o] - tea[o])
		end for
		ret sum / (output_size * hidden_size) $ float
	end func
	
	+func tanh(x: float): float
		ret lib@tanh(x)
	end func
	+func d_tanh(f: float): float
		ret 1.0 - f ^ 2.0
	end func
	
	+func step(x: float): float
		ret x > 0.0 ?(1.0, 0.0)
	end func
	
	+func ReLU(x: float): float
		ret x > 0.0 ?(x / 1.0, 0.0)
	end func
	
	+func sigmoid(x: float): float
		ret 1.0 / (1.0 + lib@e ^ -(x / 1.0))
	end func
	
	+func d_sigmoid(f: float): float
		ret f * (1.0 - f)
	end func
	
	
	+func save(traincount: int, count: int, filename: []char, readcount: int)
		var savecount: int
		var savedata: []char :: ""
		if(traincount <= 100)
			do savecount :: 10
		elif(traincount <= 1000)
			do savecount :: 100
		elif(traincount <= 3000)
			do savecount :: 500
		else
			do savecount :: 1000
		end if
		
		if(count % savecount = 0 & count > 0)
			var handle: file@Writer :: file@makeWriter(filename ~ "_\{readcount + count}.txt", false)
			for i(0, input_size)
				for h(0, hidden_size)
					do savedata :~ "\{me.weight_ih[i][h]},"
					for o(0, output_size - 1)
						do savedata :~ "\{me.weight_ho[h][o]},"
					end for
				end for
			end for
			do handle.writeStr(savedata)
			do handle.fin()
			do \main@logtxt :~ "保存しました。 t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0 / 60.0}分\n"
			do dbg@print("保存しました\n")
		end if
	end func
	
	+func read(filename: []char, readcount: int)
		
		var N: int :: me.NxN(filename)
		var iSize: int :: N ^ 2 * 3
		if(file@exist(filename ~ "_\{readcount}.txt"))
			var handle: file@Reader :: file@makeReader(filename ~ "_\{readcount}.txt")
			do handle.delimiter([',']) {区切り文字の設定}
			for i(0, iSize)
				for h(0, hidden_size)
					do me.weight_ih[i][h] :: handle.readFloat()
					for o(0, output_size - 1)
						do me.weight_ho[h][o] :: handle.readFloat()
					end for
				end for
			end for
			do handle.fin()
			do dbg@print("ファイル読み込み完了,t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0}秒\n")
			do \main@logtxt :~ "ファイル読み込み完了,t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0}秒\n"
		end if
	end func
	
	;今のところこの関数の意味はない。異なるマスの数の重みデータをそもそも読み込めていないからだ。
	func NxN(str: []char): int
		var N: int
		var existed: bool
		for i(0, ^str - 1)
			if(str[i] = '_')
				if(i + 2 <= ^str - 1)
					if(str[i + 2] = 'x')
						do N :: "\{str[i + 1]}".toInt(&existed)
						do dbg@print("\{N}\n")
						ret N
					end if
				end if
			end if
		end for
		ret - 1
	end func
	
end class
